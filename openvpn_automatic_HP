#!/bin/bash

if [[ "${OSTYPE}" =~ "linux" ]]
then
  SCRIPT=$(readlink -f $0)
elif [[ "${OSTYPE}" =~ "darwin" ]]
then
  SCRIPT=$(greadlink -f $0)
else
  SCRIPT=$(readlink -f $0)
fi

SCRIPTS_HOME=$(dirname ${SCRIPT})
source "${SCRIPTS_HOME}/config"
echo -e "${BLUE}${datestring} EXECUTE: ${YELLOW}[ ${LIME}$0 $@ ${YELLOW} ]${RESET}"

usage()
{
echo "
${CYAN}Usage:${BRIGHT}${WHITE}
$0 [-h] [-m] [-M 1-6][-o DIRECTORY] [-v]

${NORMAL}${CYAN}This script manages LB HA connections to NordVPN services:${BLUE}

    ${LIME}-h${BLUE} Obfuscated NordVPN servers - smallest load (ommiting national firewalls)
    ${LIME}-m${BLUE} Multinational NordVPN servers - smallest load (connecting to a few countries servers at once)
    ${LIME}-M${BLUE} Amount of balanced connections
          (defult:  3 simultaneus vpn connections,
           max:     6 simultaneus vpn connections.)
    ${LIME}-o${BLUE}  OUTPUT directory - where to store ALL LOGs and TEMP files
          (default directory is: ${CYAN}${HOME}/var${BLUE} and TMP and
           LOG are subdirectories to var)
    ${LIME}-v${BLUE}  verbose (lots of extra notifications)
    

${BLUE}please use ${YELLOW}man reports${BLUE} for more details and description${RESET}
"
1>&2;
exit 1
}

VERBOSE=no
HIDDEN=no
MULTINATIONAL=no
while getopts ":o:M:hmv" ARG
do
  case "${ARG}" in
        v)
            VERBOSE=yes
            ;;
        o)
            o=${OPTARG}
            ;;
        m)
            MULTINATIONAL=yes
            ;;
        M)
            M=${OPTARG}
            if [ ${M} -ge 1 ] || [ ${M} -le 6 ]
            then
              LB_CONNECTIONS=${M}
            else
              error "There might be only from 1 to 6 simultaneus connections to NordVPN"    
              usage
            fi
            ;;
        h)
            HIDDEN=yes
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z ${o} ]
then
  VAR="${HOME}/var"
  mkdir -p ${VAR}
else
  VAR="${o}"
  mkdir -p ${VAR} > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    error "I have no permissions to create OUTPUT directory here"
    exit 1
  fi
fi

TMP="${VAR}/tmp"
mkdir -p ${TMP}
LOG="${VAR}/log"
mkdir -p ${LOG}
if [ -z ${M} ]
then
  LB_CONNECTIONS="4"
fi
  
MAIN_ETH="enxb827eb330952"
OPENVPN_TEMPLATE="nordvpn_template.conf"
DEV_VPN=$(grep ^dev "${SCRIPTS_HOME}/${OPENVPN_TEMPLATE}" | awk '{print $2}')
NORDVPN_HA_PROCESS="nordvpn_ha_process"
LOCAL_GATEWAY="192.168.2.254"
TUN_MAX_DEV=$((LB_CONNECTIONS - 1))
PRE_TEMP_CONF="nordvpn_pre_conf_details_${CURRENT_TIMESTAMP}.conf"
POST_TEMP_CONF="nordvpn_post_conf_details_${CURRENT_TIMESTAMP}.conf"
COUNTRY_ID_FILE="COUNTRY_ID_${CURRENT_TIMESTAMP}.txt"
RECOMMENDED_CLOSEST_FILE="closest_recommended_${CURRENT_TIMESTAMP}.txt"

if [[ ${VERBOSE} == yes ]]
then
  debug "Collecting whole list of NordVPN countries and IDs"
fi
curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output '.[] | . as $parent | .cities[] | [$parent.name, $parent.id, .name, .id] | "\(.[0])~\(.[1])"' | sort -u> "${TMP}/${COUNTRY_ID_FILE}" &

if [[ ${VERBOSE} == yes ]]
then
  debug "CONSTANTS of all ${YELLOW}VPNs${BLUE}:
                                                                      MAIN_ETH      =   ${WINE}${MAIN_ETH}${BLUE}
                                                                      LOCAL_GATEWAY =   ${WINE}${LOCAL_GATEWAY}${BLUE}
                                                                      LB_CONNECTIONS=   ${WINE}${LB_CONNECTIONS}${BLUE}
                                                                      TUN_MAX_DEV   =   ${WINE}${TUN_MAX_DEV}${BLUE}"
fi

if [[ ${MULTINATIONAL} == no ]]
then
  inf "Picking up the least loaded and the closest NordVPN servers"
  if [[ ${HIDDEN} == no ]]
  then
    RECOMMENDED_SERVERS=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard" | jq --raw-output --slurp " .[] | sort_by(.load) | limit(${LB_CONNECTIONS};.[]) | [.hostname] | \"\(.[0])\"")
  elif [[ ${HIDDEN} == yes ]]
  then
    RECOMMENDED_SERVERS=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers" | jq --raw-output --slurp " .[] | sort_by(.load) | limit(${LB_CONNECTIONS};.[]) | [.hostname] | \"\(.[0])\"")
  fi
elif [[ ${MULTINATIONAL} == yes ]]
then
  wait
  inf "Looking for recommended and the \"closest\" recommended server out of the current country"
  IFS=$'\n'
  for COUNTRY_ID in $(cat "${TMP}/${COUNTRY_ID_FILE}")
  do
    COUNTRY=$(echo ${COUNTRY_ID} | awk -F\~ '{print $1}')
    ID=$(echo ${COUNTRY_ID} | awk -F\~ '{print $2}')
    if [[ ${HIDDEN} == no ]]
    then
      RECOMMENDED_PER_ID=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard&filters\[country_id\]=${ID}&limit=1" | jq --raw-output '.[].hostname')
    elif [[ ${HIDDEN} == yes ]]
    then
      RECOMMENDED_PER_ID=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers&filters\[country_id\]=${ID}&limit=1" | jq --raw-output '.[].hostname')
    fi
    for RECOMMENDED in ${RECOMMENDED_PER_ID}
    do
      (
        NUMBER_FOR_STATS="3"
        PING_SUM=$(ping -c ${NUMBER_FOR_STATS} ${RECOMMENDED} | grep 'bytes from' | awk -Ftime= '{print $2}' | awk '{sum+=$1} END {print sum}')
        PING_AVG=$(echo "${PING_SUM}/${NUMBER_FOR_STATS}" | bc)
        #if [[ ${VERBOSE} == yes ]]
        #then
        #  debug "ping=${LIME}${PING_AVG}${BLUE} ms for ${YELLOW}${COUNTRY}${BLUE} recommended server is: ${LIME}${RECOMMENDED}"
        #fi
        echo "${PING_AVG}~${RECOMMENDED}~${COUNTRY}" >> "${TMP}/${RECOMMENDED_CLOSEST_FILE}"
      ) &
    done
  done
  wait
  for LINE in $(sort -gu "${TMP}/${RECOMMENDED_CLOSEST_FILE}" | tail -n +2 | head -n${LB_CONNECTIONS})
  do
    BEST_COUNTRY_SERVER=$(echo ${LINE} | awk -F\~ '{print $2}')
    BEST_COUNTRY_SERVER_PING=$(echo ${LINE} | awk -F\~ '{print $1}')
    BEST_COUNTRY_NAME=$(echo ${LINE} | awk -F\~ '{print $3}')
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Recommewnded server of the \"closest\" country ${YELLOW}VPNs${BLUE}:
                                                                      BEST_COUNTRY_SERVER       =   ${WINE}${BEST_COUNTRY_SERVER}${BLUE}
                                                                      BEST_COUNTRY_SERVER_PING  =   ${WINE}${BEST_COUNTRY_SERVER_PING}${BLUE}
                                                                      BEST_COUNTRY_NAME         =   ${WINE}${BEST_COUNTRY_NAME}"
    fi
    RECOMMENDED_SERVERS="${BEST_COUNTRY_SERVER}
 ${RECOMMENDED_SERVERS}"
  done
else
  usage
fi

wait

if [[ ${VERBOSE} == yes ]]
then
  debug "RECOMMENDED_SERVERS=${YELLOW}\"${RECOMMENDED_SERVERS}\""
fi

inf "Flushing iptables"
iptables -t filter -F
iptables -t filter -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t filter -P INPUT ACCEPT
iptables -t filter -P OUTPUT ACCEPT
iptables -t filter -P FORWARD ACCEPT

echo "TUN_DEVICE_NR~NUMBER~VPN_SERVER_NAME~VPN_IP_SERVER~VPN_SERVER~VPN_SERVER_DEV" > "${TMP}/${PRE_TEMP_CONF}"
echo "VPN_SERVER_NET~VPN_SERVER_ROUTER~VPN_SERVER_LOCALROUTER_IP" > "${TMP}/${POST_TEMP_CONF}"

#for TUN_DEVICE_NR in $(eval echo "{0..${TUN_MAX_DEV}}")
for ((TUN_DEVICE_NR=0;TUN_DEVICE_NR<=${TUN_MAX_DEV};TUN_DEVICE_NR++))
do
  VPN_SERVER_LOCALROUTER_IP=""
  NUMBER=$((TUN_DEVICE_NR + 1))
  VPN_SERVER_NAME=$(echo ${RECOMMENDED_SERVERS} | awk -v a="${NUMBER}" '{print $a}')
  VPN_IP_SERVER=$(nslookup ${VPN_SERVER_NAME} | grep -A2 ^Name: | grep ^Address: | awk '{print $2}')
  VPN_SERVER="remote ${VPN_IP_SERVER} 443"
  VPN_SERVER_DEV="${DEV_VPN}${TUN_DEVICE_NR}"
  echo "${TUN_DEVICE_NR}~${NUMBER}~${VPN_SERVER_NAME}~${VPN_IP_SERVER}~${VPN_SERVER}~${VPN_SERVER_DEV}" >> "${TMP}/${PRE_TEMP_CONF}"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "Creating ${YELLOW}nordvpn_srv${NUMBER}.conf${BLUE} from template"
  fi
  cp -f "${SCRIPTS_HOME}/${OPENVPN_TEMPLATE}" /etc/openvpn/nordvpn_srv${NUMBER}.conf
  sed -i "s/remote_variable/${VPN_SERVER}/g" /etc/openvpn/nordvpn_srv${NUMBER}.conf
  inf "Stopping old NordVPN connection (${YELLOW}nordvpn_srv${NUMBER}${CYAN}), and flushing routing tables of ${YELLOW}${VPN_SERVER_DEV}${CYAN} interface"
  systemctl stop openvpn@nordvpn_srv${NUMBER}
  ip -s -d route flush table ${VPN_SERVER_DEV} > "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule del from all fwmark 0x${NUMBER} lookup ${VPN_SERVER_DEV} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule del from all fwmark 0x${NUMBER} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  IFS=$'\n'
  for RULE in $(ip rule | grep lookup | grep ${VPN_SERVER_DEV})
  do
    SRC=$(echo ${RULE} | awk '{print $3}')
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Removing RULE:      ${YELLOW}${RULE}${BLUE}"
    fi
    (
      ip -s -d rule del from ${SRC} lookup ${VPN_SERVER_DEV} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
      if [ $? -eq 0 ]
      then
        if [[ ${VERBOSE} == yes ]]
        then
          debug "RULE Removed:       ${YELLOW}${RULE}${CYAN}"
        fi
      fi
    ) &
  done
  wait

  inf "Starting ${YELLOW}openvpn@nordvpn_srv${NUMBER}${CYAN} configuration"
  systemctl start openvpn@nordvpn_srv${NUMBER}
  for i in {6..0}
  do
    echo -ne "  .   ${i}   .  "'\r'
    sleep .50
    echo -ne "    . ${i} .    "'\r'
    sleep .50
  done
  echo -ne ""'\r'
  VPN_SERVER_NET=$(route | grep '0.0.0.0' | grep -v '^0.0.0.0' | grep "${VPN_SERVER_DEV}" | awk '{print $1}')
  VPN_SERVER_ROUTER=$(route | grep '0.0.0.0' | grep -v '^0.0.0.0' | grep "${VPN_SERVER_DEV}" | awk '{print $1}' | sed 's/\.0$/\.1/g')
  VPN_SERVER_LOCALROUTER_IP=$(ip route show | grep ^${VPN_SERVER_NET} | grep ${VPN_SERVER_DEV} | awk '{print $NF}')
  echo "${VPN_SERVER_NET}~${VPN_SERVER_ROUTER}~${VPN_SERVER_LOCALROUTER_IP}" >> "${TMP}/${POST_TEMP_CONF}"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "PARAMETERS of ${YELLOW}VPN${NUMBER}${BLUE}:
                                                                      TUN_DEVICE_NR             =   ${WINE}${TUN_DEVICE_NR}${BLUE}
                                                                      NUMBER                    =   ${WINE}${NUMBER}${BLUE}
                                                                      VPN_SERVER_DEV            =   ${WINE}${VPN_SERVER_DEV}${BLUE}
                                                                      VPN_SERVER_NAME           =   ${WINE}${VPN_SERVER_NAME}${BLUE}
                                                                      VPN_IP_SERVER             =   ${WINE}${VPN_IP_SERVER}${BLUE}
                                                                      VPN_SERVER                =   ${WINE}${VPN_SERVER}${BLUE}
                                                                      VPN_SERVER_NET            =   ${WINE}${VPN_SERVER_NET}${BLUE}
                                                                      VPN_SERVER_ROUTER         =   ${WINE}${VPN_SERVER_ROUTER}${BLUE}
                                                                      VPN_SERVER_LOCALROUTER_IP =   ${WINE}${VPN_SERVER_LOCALROUTER_IP}"
  fi
  ip -s -d rule add from "${VPN_SERVER_LOCALROUTER_IP}" lookup "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d route add default via "${VPN_SERVER_ROUTER}" dev "${VPN_SERVER_DEV}" table "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule add fwmark ${NUMBER} table "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1

  inf "Aplying LoadBalancing HA iptables configuration"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "Defining MARKing (mark=${YELLOW}${NUMBER}${BLUE})"
  fi
  iptables -t mangle -N CONNMARK${NUMBER}
  iptables -t mangle -A CONNMARK${NUMBER} -j MARK --set-mark ${NUMBER}
  iptables -t mangle -A CONNMARK${NUMBER} -j CONNMARK --save-mark
  #iptables -t mangle -A CONNMARK${NUMBER} -j LOG --log-prefix "iptables-mark${NUMBER}: " --log-level info
  if [[ ${VERBOSE} == yes ]]
  then
    debug "SNAT to VPN_SERVER_LOCALROUTER_IP: ${YELLOW}${VPN_SERVER_LOCALROUTER_IP}"
  fi
  iptables -t nat -N SNAT${NUMBER}
  if [[ ${VERBOSE} == yes ]]
  then
    debug "VERBOSE is on, so logging all SNAT${YELLOW}${NUMBER}${BLUE} connections"
    iptables -t nat -A SNAT${NUMBER} -j LOG --log-prefix "snat-to-${VPN_SERVER_LOCALROUTER_IP}: " --log-level info
  fi
  iptables -t nat -A SNAT${NUMBER} -j SNAT --to-source ${VPN_SERVER_LOCALROUTER_IP}
  # if the mark is zero it means the packet does not belong to an existing connection
  iptables -t mangle -A PREROUTING -p tcp -m state --state NEW -m statistic --mode nth --every ${LB_CONNECTIONS} --packet ${TUN_DEVICE_NR} -j CONNMARK${NUMBER}
  iptables -t nat -A POSTROUTING -o ${VPN_SERVER_DEV} -j SNAT${NUMBER}
done

if [[ ${VERBOSE} == yes ]]
then
  debug "Defining MARKing restore"
fi
iptables -t mangle -N RESTOREMARK
iptables -t mangle -A RESTOREMARK -j CONNMARK --restore-mark
#iptables -t mangle -A RESTOREMARK -j LOG --log-prefix 'restore-mark: ' --log-level info
#restore the fwmark on packets that belong to an existing connection
iptables -t mangle -A PREROUTING -i ${MAIN_ETH} -p tcp -m state --state ESTABLISHED,RELATED -j RESTOREMARK

inf "Adding extra route for RedHat7 VMs"
ip -s -d route del 192.168.100.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route del 192.168.122.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route add 192.168.100.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route add 192.168.122.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1

ip route flush cache
