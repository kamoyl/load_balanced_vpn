#!/bin/bash

if [[ "${OSTYPE}" =~ "linux" ]]
then
  SCRIPT=$(readlink -f $0)
elif [[ "${OSTYPE}" =~ "darwin" ]]
then
  SCRIPT=$(greadlink -f $0)
else
  SCRIPT=$(readlink -f $0)
fi

SCRIPTS_HOME=$(dirname ${SCRIPT})
source "${SCRIPTS_HOME}/config"
echo -e "${BLUE}${datestring} EXECUTE: ${YELLOW}[ ${LIME}$0 $@ ${YELLOW} ]${RESET}"

inf "Checking prerequisites (openvpn, jq, ip, iptables, nft):"
if ! command -v openvpn > /dev/null
then
  warn "Please install ${YELLOW}openvpn${WINE} before use"
fi
if ! command -v jq > /dev/null
then
  warn "Please install ${YELLOW}jq${WINE} before use"
fi
if ! command -v ip > /dev/null
then
  warn "Please install ${YELLOW}ip${WINE} before use"
fi
if ! command -v iptables > /dev/null
then
  if ! command -v nft > /dev/null
  then
    warn "Please install ${YELLOW}iptables/nft${WINE} before use"
  fi
fi

usage()
{
echo "
${CYAN}Usage:${BRIGHT}${WHITE}
$0 [-H] [-h] [-m] [-M 1-6] [-o DIRECTORY] [-v] [-c] [-I [ID]]

${NORMAL}${CYAN}This script manages LB HA connections to NordVPN services:${BLUE}

    ${LIME}-H${BLUE} Obfuscated NordVPN servers - smallest load (ommiting national firewalls)
    ${LIME}-m${BLUE} Multinational NordVPN servers - smallest load (connecting to a few countries servers at once)
    ${LIME}-I${BLUE} Best none-obfuscated servers from a country ID
    ${LIME}-M${BLUE} Amount of balanced connections
          (defult:  2 simultaneus vpn connections,
           max:     6 simultaneus vpn connections.)
    ${LIME}-o${BLUE} OUTPUT directory - where to store ALL LOGs and TEMP files
          (default directory is: ${CYAN}${HOME}/var${BLUE} and TMP and
           LOG are subdirectories to var)
    ${LIME}-c${BLUE} CLEAN, makes only cleaning VPN connections, flushing routing tables, and iptables
    ${LIME}-v${BLUE} verbose (lots of extra notifications)
    ${LIME}-h${BLUE} help
    
${RESET}"
1>&2;
exit 1
}

VERBOSE=no
HIDDEN=no
CLEAN=no
MULTINATIONAL=no
IPTABLES=yes
NFTABLES=no
while getopts ":o:M:I:Hhmvc" ARG
do
  case "${ARG}" in
        v)
            VERBOSE=yes
            ;;
        o)
            o=${OPTARG}
            ;;
        m)
            MULTINATIONAL=yes
            ;;
        M)
            M=${OPTARG}
            if [ ${M} -ge 1 ] || [ ${M} -le 6 ]
            then
              LB_CONNECTIONS=${M}
            else
              error "There might be only from 1 to 6 simultaneus connections to NordVPN"    
              usage
            fi
            ;;
        I)  
            I=${OPTARG}
            if [[ ${I} =~ ^[0-9]+$ ]]
            then
              COUNTRY_ID=${I}
            else
              error "COUNTRYID must be a numeric value"
              inf "Check all COUNTRY_ID values this way: ${YELLOW}curl --silent \"https://api.nordvpn.com/v1/servers/countries\" | jq --raw-output '.[] | . as \$parent | [\$parent.name, \$parent.id] | \"\(.[0]) [\(.[1])]\"'"
              exit 1
            fi
            ;;
        H)
            HIDDEN=yes
            ;;
        c)  CLEAN=yes
            ;;
        h)  usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z ${o} ]
then
  VAR="${HOME}/var"
  mkdir -p ${VAR}
else
  VAR=$(readlink -m "${o}")
  mkdir -p ${VAR} > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    error "I have no permissions to create OUTPUT directory here"
    exit 1
  fi
fi

TMP="${VAR}/tmp-${CURRENT_TIMESTAMP}"
mkdir -p ${TMP}
LOG="${VAR}/log-${CURRENT_TIMESTAMP}"
mkdir -p ${LOG}
if [ -z ${M} ]
then
  LB_CONNECTIONS="2"
fi

MAIN_ETH="eth0"
OPENVPN_TEMPLATE="nordvpn_template.conf"
DEV_VPN=$(grep ^dev "${SCRIPTS_HOME}/${OPENVPN_TEMPLATE}" | awk '{print $2}')
NORDVPN_HA_PROCESS="nordvpn_ha_process"
IP_TABLES="ip-nft_tables_${CURRENT_TIMESTAMP}.input"
RT_TABLES_FILE="/etc/iproute2/rt_tables"
LOCAL_GATEWAY="192.168.2.254"
TUN_MAX_DEV=$((LB_CONNECTIONS - 1))
PRE_TEMP_CONF="nordvpn_pre_conf_details_${CURRENT_TIMESTAMP}.conf"
POST_TEMP_CONF="nordvpn_post_conf_details_${CURRENT_TIMESTAMP}.conf"
COUNTRY_ID_FILE="COUNTRY_ID_${CURRENT_TIMESTAMP}.txt"
RECOMMENDED_CLOSEST_FILE="closest_recommended_${CURRENT_TIMESTAMP}.txt"
# enable /proc/sys/net/ipv4/conf/*/secure_redirects
# net.ipv4.send_redirects = 0
# net.ipv4.accept_redirects = 0 

inf "Cleaning all possible leftovers of OpenVPN connections"

for EXISTING_TUN in $(ifconfig | grep ^${DEV_VPN} | awk -F\: '{print $1}')
do
  EXISTING_TUN_NR=$(ifconfig | grep ^${EXISTING_TUN} | awk -F\: '{print $1}' | awk -F${DEV_VPN} '{print $2}')
  EXISTING_TUN_CONN_NR=$((EXISTING_TUN_NR + 1))
  inf "Cleaning VPN connection ${YELLOW}openvpn@nordvpn_srv${EXISTING_TUN_CONN_NR}.service${CYAN} device: ${YELLOW}${EXISTING_TUN}"
  VPN_SERVER_LOCALROUTER_IP=""
  inf "Stopping old NordVPN connection (${YELLOW}nordvpn_srv${EXISTING_TUN_CONN_NR}${CYAN}), and flushing routing tables of ${YELLOW}${EXISTING_TUN}${CYAN} interface"
  systemctl stop openvpn@nordvpn_srv${EXISTING_TUN_CONN_NR}
  ip -s -d route flush table ${EXISTING_TUN} > "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule del from all fwmark 0x${EXISTING_TUN_CONN_NR} lookup ${EXISTING_TUN} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule del from all fwmark 0x${EXISTING_TUN_CONN_NR} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  IFS=$'\n'
  for RULE in $(ip rule | grep lookup | grep ${EXISTING_TUN})
  do
    SRC=$(echo ${RULE} | awk '{print $3}')
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Removing RULE:      ${YELLOW}${RULE}${BLUE}"
    fi
    (
      ip -s -d rule del from ${SRC} lookup ${EXISTING_TUN} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
      if [ $? -eq 0 ]
      then
        if [[ ${VERBOSE} == yes ]]
        then
          debug "RULE Removed:       ${YELLOW}${RULE}${CYAN}"
        fi
      fi
    ) &
  done
  wait
done

ip route flush cache

if [[ ${CLEAN} == yes ]]
then
  inf "Only cleaning is done, exitting"
  exit 0
fi

for i in {3..0}
do
  echo -ne "Starting in:  .   ${i}   .  "'\r'
  sleep .50
  echo -ne "Starting in:    . ${i} .    "'\r'
  sleep .50
done
echo -ne ""'\r'

if [[ ${VERBOSE} == yes ]]
then
  debug "Collecting whole list of NordVPN countries and IDs"
fi
#if [[ $(curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output '.[] | . as $parent | .cities[] | [$parent.name, $parent.id, .name, .id] | "\(.[0])~\(.[1])"') == NULL ]] || [ $? -ne 0 ]
#then
#  error "NordVPN API doesn't work properly, exiting"
#  exit 1
#else 
  curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output '.[] | . as $parent | .cities[] | [$parent.name, $parent.id, .name, .id] | "\(.[0])~\(.[1])"' | sort -u > "${TMP}/${COUNTRY_ID_FILE}" &
#fi

if [[ ${VERBOSE} == yes ]]
then
  debug "CONSTANTS of all ${YELLOW}VPNs${BLUE}:
                                                                      MAIN_ETH      =   ${WINE}${MAIN_ETH}${BLUE}
                                                                      LOCAL_GATEWAY =   ${WINE}${LOCAL_GATEWAY}${BLUE}
                                                                      LB_CONNECTIONS=   ${WINE}${LB_CONNECTIONS}${BLUE}
                                                                      TUN_MAX_DEV   =   ${WINE}${TUN_MAX_DEV}${BLUE}"
fi

if [[ ${MULTINATIONAL} == no ]]
then
  if [ -z ${COUNTRY_ID} ]
  then
    inf "Picking up the least loaded and the closest NordVPN servers"
    if [[ ${HIDDEN} == no ]]
    then
      RECOMMENDED_SERVERS=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard" | jq --raw-output --slurp " .[] | sort_by(.load) | limit(${LB_CONNECTIONS};.[]) | [.hostname] | \"\(.[0])\"")
    elif [[ ${HIDDEN} == yes ]]
    then
      RECOMMENDED_SERVERS=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers" | jq --raw-output --slurp " .[] | sort_by(.load) | limit(${LB_CONNECTIONS};.[]) | [.hostname] | \"\(.[0])\"")
    fi
  else
    COUNTRY=$(curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output '.[] | . as $parent | [$parent.name, $parent.id] | "\(.[0]) [\(.[1])]"' | grep 174 | awk '{print $1}')
    inf "Picking up the least loaded NordVPN server from country: ${YELLOW}${COUNTRY}${CYAN} (${YELLOW}${COUNTRY_ID}${CYAN})"
    RECOMMENDED_SERVERS=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[country_id\]=${COUNTRY_ID}&limit=${LB_CONNECTIONS}" | jq --raw-output '.[].hostname')
  fi
elif [[ ${MULTINATIONAL} == yes ]]
then
  wait
  inf "Looking for recommended and the \"closest\" recommended server out of the current country"
  IFS=$'\n'
  for COUNTRY_ID in $(cat "${TMP}/${COUNTRY_ID_FILE}")
  do
    COUNTRY=$(echo ${COUNTRY_ID} | awk -F\~ '{print $1}')
    ID=$(echo ${COUNTRY_ID} | awk -F\~ '{print $2}')
    if [[ ${HIDDEN} == no ]]
    then
      RECOMMENDED_PER_ID=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard&filters\[country_id\]=${ID}&limit=1" | jq --raw-output '.[].hostname')
    elif [[ ${HIDDEN} == yes ]]
    then
      RECOMMENDED_PER_ID=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers&filters\[country_id\]=${ID}&limit=1" | jq --raw-output '.[].hostname')
    fi
    for RECOMMENDED in ${RECOMMENDED_PER_ID}
    do
      (
        NUMBER_FOR_STATS="3"
        PING_SUM=$(ping -c ${NUMBER_FOR_STATS} ${RECOMMENDED} | grep 'bytes from' | awk -Ftime= '{print $2}' | awk '{sum+=$1} END {print sum}')
        PING_AVG=$(echo "${PING_SUM}/${NUMBER_FOR_STATS}" | bc)
        #if [[ ${VERBOSE} == yes ]]
        #then
        #  debug "ping=${LIME}${PING_AVG}${BLUE} ms for ${YELLOW}${COUNTRY}${BLUE} recommended server is: ${LIME}${RECOMMENDED}"
        #fi
        echo "${PING_AVG}~${RECOMMENDED}~${COUNTRY}" >> "${TMP}/${RECOMMENDED_CLOSEST_FILE}"
      ) &
    done
  done
  wait
  for LINE in $(sort -gu "${TMP}/${RECOMMENDED_CLOSEST_FILE}" | tail -n +2 | head -n${LB_CONNECTIONS})
  do
    BEST_COUNTRY_SERVER=$(echo ${LINE} | awk -F\~ '{print $2}')
    BEST_COUNTRY_SERVER_PING=$(echo ${LINE} | awk -F\~ '{print $1}')
    BEST_COUNTRY_NAME=$(echo ${LINE} | awk -F\~ '{print $3}')
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Recommewnded server of the \"closest\" country ${YELLOW}VPNs${BLUE}:
                                                                      BEST_COUNTRY_SERVER       =   ${WINE}${BEST_COUNTRY_SERVER}${BLUE}
                                                                      BEST_COUNTRY_SERVER_PING  =   ${WINE}${BEST_COUNTRY_SERVER_PING}${BLUE}
                                                                      BEST_COUNTRY_NAME         =   ${WINE}${BEST_COUNTRY_NAME}"
    fi
    RECOMMENDED_SERVERS="${BEST_COUNTRY_SERVER}
 ${RECOMMENDED_SERVERS}"
  done
else
  usage
fi
wait

if [[ ${VERBOSE} == yes ]]
then
  debug "RECOMMENDED_SERVERS=${YELLOW}\"${RECOMMENDED_SERVERS}\""
fi

inf "Checking if appropriate configuration of routing tables names exists in ${YELLOW}${RT_TABLES_FILE}"
for ((TUN_DEVICE_NR=0;TUN_DEVICE_NR<=${TUN_MAX_DEV};TUN_DEVICE_NR++))
do
  VPN_SERVER_DEV="${DEV_VPN}${TUN_DEVICE_NR}"
  ROUTING_TABLES_NR=$((150 + TUN_DEVICE_NR))
  if grep -q ${VPN_SERVER_DEV} ${RT_TABLES_FILE}
  then
    ROUTING_TABLES_NR=$(grep ${VPN_SERVER_DEV} ${RT_TABLES_FILE} | awk '{print $1}')
    if [[ ${VERBOSE} == yes ]]
    then
      debug "  routing table: ${YELLOW}${VPN_SERVER_DEV}${BLUE} configuration exists in ${YELLOW}${RT_TABLES_FILE}${BLUE}, with nr: ${YELLOW}${ROUTING_TABLES_NR}"
    fi
  else
    if [[ ${VERBOSE} == yes ]]
    then
      debug "  routing table: ${YELLOW}${VPN_SERVER_DEV}${BLUE} configuration doesn't exist in ${YELLOW}${RT_TABLES_FILE}${BLUE}, creating"
    fi
    if grep -q ${ROUTING_TABLES_NR} ${RT_TABLES_FILE}
    then
      if [[ ${VERBOSE} == yes ]]
      then
        debug "    There is already routing table with such number: ${YELLOW}${ROUTING_TABLES_NR}${BLUE}, generating new one for ${YELLOW}${VPN_SERVER_DEV}"
      fi
      NUMBER=$[ ( $RANDOM % 100 )  + 1 ]
      ROUTING_TABLES_NR=$((ROUTING_TABLES_NR + NUMBER))
      if [[ ${VERBOSE} == yes ]]
      then
        debug "    Creating routing table ${YELLOW}${VPN_SERVER_DEV}${BLUE} with such number: ${YELLOW}${ROUTING_TABLES_NR}"
      fi
      echo "${ROUTING_TABLES_NR}    ${VPN_SERVER_DEV}" >> ${RT_TABLES_FILE}
      ERROR_CODE="$?"
      if [ ${ERROR_CODE} -eq 0 ]
      then
        if [[ ${VERBOSE} == yes ]]
        then
          debug "      Routing table ${YELLOW}${VPN_SERVER_DEV}${BLUE} with number: ${YELLOW}${ROUTING_TABLES_NR}${BLUE} created"
        else
          error "      Routing table ${YELLOW}${VPN_SERVER_DEV}${RED} with number: ${YELLOW}${ROUTING_TABLES_NR}${RED} cannot be created"
          exit 1
        fi
      fi
    else
      echo "${ROUTING_TABLES_NR}    ${VPN_SERVER_DEV}" >> ${RT_TABLES_FILE}
      ERROR_CODE="$?"
      if [ ${ERROR_CODE} -eq 0 ]
      then
        if [[ ${VERBOSE} == yes ]]
        then
          debug "    Routing table ${YELLOW}${VPN_SERVER_DEV}${BLUE} with number: ${YELLOW}${ROUTING_TABLES_NR}${BLUE} created"
        else
          error "    Routing table ${YELLOW}${VPN_SERVER_DEV}${RED} with number: ${YELLOW}${ROUTING_TABLES_NR}${RED} cannot be created"
          exit 1
        fi
      fi
    fi
  fi
done

if [[ ${IPTABLES} == yes ]]
then
  inf "Flushing iptables"
  echo "iptables -t filter -F
  iptables -t filter -X
  iptables -t nat -F
  iptables -t nat -X
  iptables -t mangle -F
  iptables -t mangle -X
  iptables -t filter -P INPUT ACCEPT
  iptables -t filter -P OUTPUT ACCEPT
  iptables -t filter -P FORWARD ACCEPT" > "${TMP}/${IP_TABLES}"
fi

if [[ ${NFTABLES} == yes ]]
then
  inf "Flushing nft tables"
  echo "nft flush table ip filter
  nft delete chain ip filter (null)
  nft flush table ip nat
  nft delete chain ip nat (null)
  nft flush table ip mangle
  nft delete chain ip mangle (null)" > "${TMP}/${IP_TABLES}"
fi

echo "TUN_DEVICE_NR~NUMBER~VPN_SERVER_NAME~VPN_IP_SERVER~VPN_SERVER~VPN_SERVER_DEV" > "${TMP}/${PRE_TEMP_CONF}"
echo "TUN_DEVICE_NR~VPN_SERVER_NET~VPN_SERVER_ROUTER~VPN_SERVER_LOCALROUTER_IP" > "${TMP}/${POST_TEMP_CONF}"

for ((TUN_DEVICE_NR=0;TUN_DEVICE_NR<=${TUN_MAX_DEV};TUN_DEVICE_NR++))
do
  VPN_SERVER_LOCALROUTER_IP=""
  NUMBER=$((TUN_DEVICE_NR + 1))
  VPN_SERVER_NAME=$(echo ${RECOMMENDED_SERVERS} | awk -v a="${NUMBER}" '{print $a}')
  VPN_IP_SERVER=$(nslookup ${VPN_SERVER_NAME} | grep -A2 ^Name: | grep ^Address: | awk '{print $2}')
  VPN_SERVER="remote ${VPN_IP_SERVER} 443"
  VPN_SERVER_DEV="${DEV_VPN}${TUN_DEVICE_NR}"
  echo "${TUN_DEVICE_NR}~${NUMBER}~${VPN_SERVER_NAME}~${VPN_IP_SERVER}~${VPN_SERVER}~${VPN_SERVER_DEV}" >> "${TMP}/${PRE_TEMP_CONF}"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "Creating ${YELLOW}nordvpn_srv${NUMBER}.conf${BLUE} from template"
  fi
  cp -f "${SCRIPTS_HOME}/${OPENVPN_TEMPLATE}" /etc/openvpn/nordvpn_srv${NUMBER}.conf
  sed -i "s/remote_variable/${VPN_SERVER}/g" /etc/openvpn/nordvpn_srv${NUMBER}.conf

  inf "Starting ${YELLOW}openvpn@nordvpn_srv${NUMBER}${CYAN} configuration"
  systemctl start openvpn@nordvpn_srv${NUMBER}
  for i in {5..0}
  do
    echo -ne "  .   ${i}   .  "'\r'
    sleep .50
    echo -ne "    . ${i} .    "'\r'
    sleep .50
  done
  echo -ne ""'\r'
  VPN_SERVER_NET=$(route | grep '0.0.0.0' | grep -v '^0.0.0.0' | grep "${VPN_SERVER_DEV}" | awk '{print $1}')
  VPN_SERVER_ROUTER=$(route | grep '0.0.0.0' | grep -v '^0.0.0.0' | grep "${VPN_SERVER_DEV}" | awk '{print $1}' | sed 's/\.0$/\.1/g')
  VPN_SERVER_LOCALROUTER_IP=$(ip route show | grep ^${VPN_SERVER_NET} | grep ${VPN_SERVER_DEV} | awk '{print $NF}')
  echo "${TUN_DEVICE_NR}~${VPN_SERVER_NET}~${VPN_SERVER_ROUTER}~${VPN_SERVER_LOCALROUTER_IP}" >> "${TMP}/${POST_TEMP_CONF}"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "PARAMETERS of ${YELLOW}VPN${NUMBER}${BLUE}:
                                                                      TUN_DEVICE_NR             =   ${WINE}${TUN_DEVICE_NR}${BLUE}
                                                                      NUMBER                    =   ${WINE}${NUMBER}${BLUE}
                                                                      VPN_SERVER_DEV            =   ${WINE}${VPN_SERVER_DEV}${BLUE}
                                                                      VPN_SERVER_NAME           =   ${WINE}${VPN_SERVER_NAME}${BLUE}
                                                                      VPN_IP_SERVER             =   ${WINE}${VPN_IP_SERVER}${BLUE}
                                                                      VPN_SERVER                =   ${WINE}${VPN_SERVER}${BLUE}
                                                                      VPN_SERVER_NET            =   ${WINE}${VPN_SERVER_NET}${BLUE}
                                                                      VPN_SERVER_ROUTER         =   ${WINE}${VPN_SERVER_ROUTER}${BLUE}
                                                                      VPN_SERVER_LOCALROUTER_IP =   ${WINE}${VPN_SERVER_LOCALROUTER_IP}"
  fi
  ip -s -d rule add from "${VPN_SERVER_LOCALROUTER_IP}" lookup "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d route add default via "${VPN_SERVER_ROUTER}" dev "${VPN_SERVER_DEV}" table "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule add fwmark ${NUMBER} table "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1

  inf "Adding LoadBalancing HA iptables configuration"
  if [[ ${IPTABLES} == yes ]]
  then
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Defining MARKing (mark=${YELLOW}${NUMBER}${BLUE})"
    fi
    echo "iptables -t mangle -N CONNMARK${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "iptables -t mangle -A CONNMARK${NUMBER} -j MARK --set-mark ${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "iptables -t mangle -A CONNMARK${NUMBER} -j CONNMARK --save-mark" >> "${TMP}/${IP_TABLES}"
    if [[ ${VERBOSE} == yes ]]
    then
      debug "SNAT to VPN_SERVER_LOCALROUTER_IP: ${YELLOW}${VPN_SERVER_LOCALROUTER_IP}"
    fi
    echo "iptables -t nat -N SNAT${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "iptables -t nat -A SNAT${NUMBER} -j SNAT --to-source ${VPN_SERVER_LOCALROUTER_IP}" >> "${TMP}/${IP_TABLES}"
    echo "iptables -t mangle -A PREROUTING -p tcp -m state --state NEW -m statistic --mode nth --every ${LB_CONNECTIONS} --packet ${TUN_DEVICE_NR} -j CONNMARK${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "iptables -t nat -A POSTROUTING -o ${VPN_SERVER_DEV} -j SNAT${NUMBER}" >> "${TMP}/${IP_TABLES}"
    if [[ ${VERBOSE} == yes ]]
    then
      debug "VERBOSE is on, so logging is enabled"
      echo "iptables -t nat -A SNAT${NUMBER} -j LOG --log-prefix \"snat-to-${VPN_SERVER_LOCALROUTER_IP}: \" --log-level info" >> "${TMP}/${IP_TABLES}"
      echo "iptables -t mangle -A CONNMARK${NUMBER} -j LOG --log-prefix \"iptables-mark${NUMBER}: \" --log-level info" >> "${TMP}/${IP_TABLES}"
    fi
  fi
  if [[ ${NFTABLES} == yes ]]
  then
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Defining MARKing (mark=${YELLOW}${NUMBER}${BLUE})"
    fi
    echo "nft add chain ip mangle CONNMARK${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "nft add rule ip mangle CONNMARK${NUMBER} counter meta mark set 0x${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "nft add rule ip mangle CONNMARK${NUMBER} counter ct mark set mark" >> "${TMP}/${IP_TABLES}"
    if [[ ${VERBOSE} == yes ]]
    then
      debug "SNAT to VPN_SERVER_LOCALROUTER_IP: ${YELLOW}${VPN_SERVER_LOCALROUTER_IP}"
    fi
    echo "nft add chain ip nat SNAT${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "nft add rule ip nat SNAT${NUMBER} counter snat to ${VPN_SERVER_LOCALROUTER_IP}" >> "${TMP}/${IP_TABLES}"
    echo "nft add rule ip mangle PREROUTING ip protocol tcp ct state new numgen inc mod ${LB_CONNECTIONS} ${TUN_DEVICE_NR} counter jump CONNMARK${NUMBER}" >> "${TMP}/${IP_TABLES}"
    echo "nft add rule ip nat POSTROUTING oifname "${VPN_SERVER_DEV}" counter jump SNAT${NUMBER}" >> "${TMP}/${IP_TABLES}"
    if [[ ${VERBOSE} == yes ]]
    then
      debug "VERBOSE is on, so logging is enabled"
      echo "nft add rule ip nat SNAT${NUMBER} counter log prefix \"snat-to-${VPN_SERVER_LOCALROUTER_IP}: \" level info" >> "${TMP}/${IP_TABLES}"
      echo "nft add rule ip mangle CONNMARK${NUMBER} counter log prefix \"iptables-mark${NUMBER}: \" level info" >> "${TMP}/${IP_TABLES}"
    fi
  fi
done

if [[ ${VERBOSE} == yes ]]
then
  debug "Defining MARKing restore"
fi

if [[ ${IPTABLES} == yes ]]
then
  echo "iptables -t mangle -N RESTOREMARK" >> "${TMP}/${IP_TABLES}"
  echo "iptables -t mangle -A RESTOREMARK -j CONNMARK --restore-mark" >> "${TMP}/${IP_TABLES}"
  echo "iptables -t mangle -A PREROUTING -i ${MAIN_ETH} -p tcp -m state --state ESTABLISHED,RELATED -j RESTOREMARK" >> "${TMP}/${IP_TABLES}"
  if [[ ${VERBOSE} == yes ]]
  then
    echo "iptables -t mangle -A RESTOREMARK -j LOG --log-prefix \"restore-mark: \" --log-level info" >> "${TMP}/${IP_TABLES}"
  fi
fi
if [[ ${NFTABLES} == yes ]]
then
  echo "nft add chain ip mangle RESTOREMARK" >> "${TMP}/${IP_TABLES}"
  echo "nft add rule ip mangle RESTOREMARK counter meta mark set ct mark" >> "${TMP}/${IP_TABLES}"
  echo "nft add rule ip mangle PREROUTING iifname "${MAIN_ETH}" ip protocol tcp ct state related,established  counter jump RESTOREMARK" >> "${TMP}/${IP_TABLES}"
  if [[ ${VERBOSE} == yes ]]
  then
    echo "nft add rule ip mangle RESTOREMARK counter log prefix \"restore-mark: \" level info" >> "${TMP}/${IP_TABLES}"
  fi
fi

#only for nicer logging
VPN_SERVER_LOCALROUTER_IP=""
VPN_IP_SERVER=""

inf "Adding extra route for RedHat7 VMs"
ip -s -d route del 192.168.100.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route del 192.168.122.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route add 192.168.100.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route add 192.168.122.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip route flush cache

inf "Applying iptables script: ${YELLOW}${IP_TABLES}"
source "${TMP}/${IP_TABLES}"
