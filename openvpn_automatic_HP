#!/bin/bash

#NordVPN API
#countries in: curl --silent https://api.nordvpn.com/server | jq --raw-output '[.[].country] | sort | unique | .[]'
#server count in each country: curl --silent https://api.nordvpn.com/server | jq --raw-output '. as $parent | [.[].country] | sort | unique | .[] as $country | ($parent | map(select(.country == $country)) | length) as $count |  [$country, $count] |  "\(.[0]): \(.[1])"' 

#curl --silent "https://api.nordvpn.com/v1/servers?limit=16384" | jq --raw-output '. as $parent | [.[].locations[].country.name] | sort | unique | .[] as $country | ($parent | map(select(.locations[].country.name == $country)) | length) as $count |  [$country, $count] |  "\(.[0]): \(.[1])"' 
#list of all servers: curl --silent https://api.nordvpn.com/server | jq --raw-output '.[].domain' | sort --version-sort | wc -l
#servers in specific country: curl --silent "https://api.nordvpn.com/v1/servers?limit=16384"  | jq --raw-output '.[] | select(.locations[].country.name == "Bosnia and Herzegovina") | .hostname'
#lowest load and obfuscated: curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard&filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers" | jq --raw-output --slurp ' .[] | sort_by(.load) | limit(5;.[]) | [.hostname, .load] | "\(.[0]): \(.[1])"'
#load for specific server: curl --silent https://api.nordvpn.com/server/stats/no93.nordvpn.com | jq .percent
#conf of specific server: curl --silent "https://api.nordvpn.com/v1/servers?limit=16354" | jq '.[] | select(.hostname == "de80.nordvpn.com")'
#identifier for each country: $ curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output '.[] | [.id, .name] | @tsv'
#identifier for each country and city: $ curl --silent "https://api.nordvpn.com/v1/servers/countries" | jq --raw-output '.[] | . as $parent | .cities[] | [$parent.name, $parent.id, .name, .id] | "\(.[0]) [\(.[1])] - \(.[2]) [\(.[3])]"' 
#100 recomended servers: curl --silent "https://api.nordvpn.com/v1/servers/recommendations" | jq --raw-output '.[].hostname'
#recomended server per country: $ curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[country_id\]=81&limit=3" | jq --raw-output '.[].hostname'

if [[ "${OSTYPE}" =~ "linux" ]]
then
  SCRIPT=$(readlink -f $0)
elif [[ "${OSTYPE}" =~ "darwin" ]]
then
  SCRIPT=$(greadlink -f $0)
else
  SCRIPT=$(readlink -f $0)
fi

SCRIPTS_HOME=$(dirname ${SCRIPT})
source "${SCRIPTS_HOME}/config"
echo -e "${BLUE}${datestring} EXECUTE: ${YELLOW}[ ${LIME}$0 $@ ${YELLOW} ]${RESET}"

usage()
{
echo "
${CYAN}Usage:${BRIGHT}${WHITE}
$0 [-h] [-m] [-o DIRECTORY] [-v]

${NORMAL}${CYAN}This script manages LB HA connections to NordVPN services:${BLUE}

    ${LIME}-h${BLUE} Obfuscated NordVPN servers - smallest load (ommiting national firewalls)
    ${LIME}-m${BLUE} Multinational NordVPN servers - smallest load (connecting to a few countries servers at once)
    ${LIME}-o${BLUE}  OUTPUT directory - where to store ALL LOGs and TEMP files
          (default directory is: ${CYAN}${HOME}/var${BLUE} and TMP and
           LOG are subdirectories to var)
    ${LIME}-v${BLUE}  verbose (lots of extra notifications)
    

${BLUE}please use ${YELLOW}man reports${BLUE} for more details and description${RESET}
"
1>&2;
exit 1
}

VERBOSE=no
HIDDEN=no
MULTINATIONAL=no
while getopts ":o:hmv" ARG
do
  case "${ARG}" in
        v)
            VERBOSE=yes
            ;;
        o)
            o=${OPTARG}
            ;;
        m)
            MULTINATIONAL=yes
            ;;
        h)
            HIDDEN=yes
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z ${o} ]
then
  VAR="${HOME}/var"
  mkdir -p ${VAR}
else
  VAR="${o}"
  mkdir -p ${VAR} > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    error "I have no permissions to create OUTPUT directory here"
    exit 1
  fi
fi

TMP="${VAR}/tmp"
mkdir -p ${TMP}
LOG="${VAR}/log"
mkdir -p ${LOG}

MAIN_ETH="enxb827eb330952"
NORDVPN_HA_PROCESS="nordvpn_ha_process"
LOCAL_GATEWAY="192.168.2.254"
LB_CONNECTIONS="3"
TUN_MAX_DEV=$((LB_CONNECTIONS - 1))
PRE_TEMP_CONF="nordvpn_pre_conf_details_${CURRENT_TIMESTAMP}.conf"
POST_TEMP_CONF="nordvpn_post_conf_details_${CURRENT_TIMESTAMP}.conf"

if [[ ${VERBOSE} == yes ]]
then
  debug "CONSTANTS of all ${YELLOW}VPNs${BLUE}:
                                                                      MAIN_ETH      =   ${WINE}${MAIN_ETH}${BLUE}
                                                                      LOCAL_GATEWAY =   ${WINE}${LOCAL_GATEWAY}${BLUE}
                                                                      LB_CONNECTIONS=   ${WINE}${LB_CONNECTIONS}${BLUE}
                                                                      TUN_MAX_DEV   =   ${WINE}${TUN_MAX_DEV}${BLUE}"
fi
if [[ ${HIDDEN} == no ]] && [[ ${MULTINATIONAL} == no ]]
then
  inf "Picking up the least loaded and the closest NordVPN servers"
  RECOMMENDED_SERVERS=$(curl --silent 'https://nordvpn.com/wp-admin/admin-ajax.php?action=servers_recommendations' | jq --raw-output ' .[].hostname')
elif [[ ${HIDDEN} == yes ]] && [[ ${MULTINATIONAL} == no ]]
then
  inf "Picking up the least loaded, obfuscated and the closest NordVPN servers"
  RECOMMENDED_SERVERS=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard&filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers" | jq --raw-output --slurp ' .[] | sort_by(.load) | limit(4;.[]) | [.hostname] | "\(.[0])"')
elif [[ ${HIDDEN} == no ]] && [[ ${MULTINATIONAL} == yes ]]
then
  inf "Picking up the least loaded and the closest (but from bordered countries) NordVPN servers"
  #Belgium [21] - Brussels [654293] - 129km
  #Luxembourg [126] - Steinsel [5173235] - 284km
  #Germany [81] - Frankfurt [2215709] - 342km
  #France [74] - Paris [2886284] - 434km
  #United Kingdom [227] - London [2989907] - 460km
  for COUNTRY in 21 126 81 74
  do
    RECOMMENDED_SERVER=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[country_id\]=${COUNTRY}&limit=1" | jq --raw-output '.[].hostname')
    RECOMMENDED_SERVERS="${RECOMMENDED_SERVER}
 ${RECOMMENDED_SERVERS}"
  done
elif [[ ${HIDDEN} == yes ]] && [[ ${MULTINATIONAL} == yes ]]
then
  inf "Picking up the least loaded, obfuscated and the closest (but from bordered countries) NordVPN servers"
  for COUNTRY in 21 126 81 74
  do
    RECOMMENDED_SERVER=$(curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[servers_groups\]\[identifier\]=legacy_standard&filters\[servers_groups\]\[identifier\]=legacy_obfuscated_servers&filters\[country_id\]=${COUNTRY}&limit=1" | jq --raw-output '.[].hostname')
    RECOMMENDED_SERVERS="${RECOMMENDED_SERVER}
 ${RECOMMENDED_SERVERS}"
  done
else
  usage
fi

if [[ ${VERBOSE} == yes ]]
then
  debug "RECOMMENDED_SERVERS=${YELLOW}\"${RECOMMENDED_SERVERS}\""
fi

inf "Flushing iptables"
iptables -t filter -F
iptables -t filter -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t filter -P INPUT ACCEPT
iptables -t filter -P OUTPUT ACCEPT
iptables -t filter -P FORWARD ACCEPT

echo "TUN_DEVICE_NR~NUMBER~VPN_SERVER_NAME~VPN_IP_SERVER~VPN_SERVER~VPN_SERVER_DEV" > "${TMP}/${PRE_TEMP_CONF}"
echo "VPN_SERVER_NET~VPN_SERVER_ROUTER~VPN_SERVER_LOCALROUTER_IP" > "${TMP}/${POST_TEMP_CONF}"

for TUN_DEVICE_NR in $(eval echo "{0..${TUN_MAX_DEV}}")
do
  VPN_SERVER_LOCALROUTER_IP=""
  NUMBER=$((TUN_DEVICE_NR + 1))
  VPN_SERVER_NAME=$(echo ${RECOMMENDED_SERVERS} | awk -v a="${NUMBER}" '{print $a}')
  VPN_IP_SERVER=$(nslookup ${VPN_SERVER_NAME} | grep -A2 ^Name: | grep ^Address: | awk '{print $2}')
  VPN_SERVER="remote ${VPN_IP_SERVER} 443"
  VPN_SERVER_DEV="tun${TUN_DEVICE_NR}"
  echo "${TUN_DEVICE_NR}~${NUMBER}~${VPN_SERVER_NAME}~${VPN_IP_SERVER}~${VPN_SERVER}~${VPN_SERVER_DEV}" >> "${TMP}/${PRE_TEMP_CONF}"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "Creating ${YELLOW}nordvpn_srv${NUMBER}.conf${BLUE} from template"
  fi
  cp -f /etc/openvpn/nordvpn_template.conf /etc/openvpn/nordvpn_srv${NUMBER}.conf
  sed -i "s/remote_variable/${VPN_SERVER}/g" /etc/openvpn/nordvpn_srv${NUMBER}.conf
  inf "Stopping old NordVPN connection (${YELLOW}nordvpn_srv${NUMBER}${CYAN}), and flushing routing tables of ${YELLOW}${VPN_SERVER_DEV}${CYAN} interface"
  systemctl stop openvpn@nordvpn_srv${NUMBER}
  ip -s -d route flush table ${VPN_SERVER_DEV} > "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule del from all fwmark 0x${NUMBER} lookup ${VPN_SERVER_DEV} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule del from all fwmark 0x${NUMBER} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  IFS=$'\n'
  for RULE in $(ip rule | grep lookup | grep ${VPN_SERVER_DEV})
  do
    SRC=$(echo ${RULE} | awk '{print $3}')
    if [[ ${VERBOSE} == yes ]]
    then
      debug "Removing RULE:      ${YELLOW}${RULE}${BLUE}"
    fi
    (
      ip -s -d rule del from ${SRC} lookup ${VPN_SERVER_DEV} >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
      if [ $? -eq 0 ]
      then
        if [[ ${VERBOSE} == yes ]]
        then
          debug "RULE Removed:       ${YELLOW}${RULE}${CYAN}"
        fi
      fi
    ) &
  done
  wait

  inf "Starting ${YELLOW}openvpn@nordvpn_srv${NUMBER}${CYAN} configuration"
  systemctl start openvpn@nordvpn_srv${NUMBER}
  for i in {6..0}
  do
    echo -ne "  .   ${i}   .  "'\r'
    sleep .50
    echo -ne "    . ${i} .    "'\r'
    sleep .50
  done
  echo -ne ""'\r'
  VPN_SERVER_NET=$(route | grep '0.0.0.0' | grep -v '^0.0.0.0' | grep "${VPN_SERVER_DEV}" | awk '{print $1}')
  VPN_SERVER_ROUTER=$(route | grep '0.0.0.0' | grep -v '^0.0.0.0' | grep "${VPN_SERVER_DEV}" | awk '{print $1}' | sed 's/\.0$/\.1/g')
  VPN_SERVER_LOCALROUTER_IP=$(ip route show | grep ^${VPN_SERVER_NET} | grep ${VPN_SERVER_DEV} | awk '{print $NF}')
  echo "${VPN_SERVER_NET}~${VPN_SERVER_ROUTER}~${VPN_SERVER_LOCALROUTER_IP}" >> "${TMP}/${POST_TEMP_CONF}"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "PARAMETERS of ${YELLOW}VPN${NUMBER}${BLUE}:
                                                                      TUN_DEVICE_NR             =   ${WINE}${TUN_DEVICE_NR}${BLUE}
                                                                      NUMBER                    =   ${WINE}${NUMBER}${BLUE}
                                                                      VPN_SERVER_DEV            =   ${WINE}${VPN_SERVER_DEV}${BLUE}
                                                                      VPN_SERVER_NAME           =   ${WINE}${VPN_SERVER_NAME}${BLUE}
                                                                      VPN_IP_SERVER             =   ${WINE}${VPN_IP_SERVER}${BLUE}
                                                                      VPN_SERVER                =   ${WINE}${VPN_SERVER}${BLUE}
                                                                      VPN_SERVER_NET            =   ${WINE}${VPN_SERVER_NET}${BLUE}
                                                                      VPN_SERVER_ROUTER         =   ${WINE}${VPN_SERVER_ROUTER}${BLUE}
                                                                      VPN_SERVER_LOCALROUTER_IP =   ${WINE}${VPN_SERVER_LOCALROUTER_IP}"
  fi
  ip -s -d rule add from "${VPN_SERVER_LOCALROUTER_IP}" lookup "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d route add default via "${VPN_SERVER_ROUTER}" dev "${VPN_SERVER_DEV}" table "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
  ip -s -d rule add fwmark ${NUMBER} table "${VPN_SERVER_DEV}" >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1

  inf "Aplying LoadBalancing HA iptables configuration"
  if [[ ${VERBOSE} == yes ]]
  then
    debug "Defining MARKing (mark=${YELLOW}${NUMBER}${BLUE})"
  fi
  iptables -t mangle -N CONNMARK${NUMBER}
  iptables -t mangle -A CONNMARK${NUMBER} -j MARK --set-mark ${NUMBER}
  iptables -t mangle -A CONNMARK${NUMBER} -j CONNMARK --save-mark
  #iptables -t mangle -A CONNMARK${NUMBER} -j LOG --log-prefix "iptables-mark${NUMBER}: " --log-level info
  if [[ ${VERBOSE} == yes ]]
  then
    debug "SNAT to VPN_SERVER_LOCALROUTER_IP: ${YELLOW}${VPN_SERVER_LOCALROUTER_IP}"
  fi
  iptables -t nat -N SNAT${NUMBER}
  if [[ ${VERBOSE} == yes ]]
  then
    debug "VERBOSE is on, so logging all SNAT${YELLOW}${NUMBER}${BLUE} connections"
    iptables -t nat -A SNAT${NUMBER} -j LOG --log-prefix "snat-to-${VPN_SERVER_LOCALROUTER_IP}: " --log-level info
  fi
  iptables -t nat -A SNAT${NUMBER} -j SNAT --to-source ${VPN_SERVER_LOCALROUTER_IP}
  # if the mark is zero it means the packet does not belong to an existing connection
  iptables -t mangle -A PREROUTING -p tcp -m state --state NEW -m statistic --mode nth --every ${LB_CONNECTIONS} --packet ${TUN_DEVICE_NR} -j CONNMARK${NUMBER}
  iptables -t nat -A POSTROUTING -o ${VPN_SERVER_DEV} -j SNAT${NUMBER}
done

if [[ ${VERBOSE} == yes ]]
then
  debug "Defining MARKing restore"
fi
iptables -t mangle -N RESTOREMARK
iptables -t mangle -A RESTOREMARK -j CONNMARK --restore-mark
#iptables -t mangle -A RESTOREMARK -j LOG --log-prefix 'restore-mark: ' --log-level info
#restore the fwmark on packets that belong to an existing connection
iptables -t mangle -A PREROUTING -i ${MAIN_ETH} -p tcp -m state --state ESTABLISHED,RELATED -j RESTOREMARK

inf "Adding extra route for RedHat7 VMs"
ip -s -d route del 192.168.100.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route del 192.168.122.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route add 192.168.100.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1
ip -s -d route add 192.168.122.0/24 via 192.168.2.10 >> "${LOG}/${NORDVPN_HA_PROCESS}_${CURRENT_TIMESTAMP}.log" 2>&1

ip route flush cache
